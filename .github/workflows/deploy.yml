name: Deploy to DigitalOcean Kubernetes

on:
  push:
    branches: [main]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Build and push Docker image
        env:
          REGISTRY_NAME: digitaloceanregistry
        run: |
          docker build -t registry.digitalocean.com/${REGISTRY_NAME}/node-app:${GITHUB_SHA::8} .
          docker push registry.digitalocean.com/${REGISTRY_NAME}/node-app:${GITHUB_SHA::8}

      - name: Save DigitalOcean kubeconfig
        run: doctl kubernetes cluster kubeconfig save digital-ocean-cluster

      - name: Delete existing resources
        run: |
          kubectl delete deployment node-app --ignore-not-found
          kubectl delete service node-app-service --ignore-not-found
          kubectl delete ingress node-app-ingress --ignore-not-found
          kubectl delete secret app-secrets --ignore-not-found
          kubectl delete secret registry-digitaloceanregistry --ignore-not-found
        continue-on-error: true

      - name: Create image pull secret
        run: |
          kubectl create secret docker-registry registry-digitaloceanregistry \
            --docker-server=registry.digitalocean.com \
            --docker-username=${{ secrets.DIGITALOCEAN_USERNAME }} \
            --docker-password=${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} \

      - name: Update deployment file
        env:
          REGISTRY_NAME: digitaloceanregistry
        run: |
          sed -i 's|image: registry.digitalocean.com/digitaloceanregistry/node-app:.*|image: registry.digitalocean.com/digitaloceanregistry/node-app:'"${GITHUB_SHA::8}"'|' k8s/deployment.yaml

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl apply -f k8s/cluster-issuer.yaml

      - name: Create and apply Kubernetes secrets
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          CLIENT_URL: ${{ secrets.CLIENT_URL }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          UPSTASH_REDIS_REST_URL: ${{ secrets.UPSTASH_REDIS_REST_URL }}
          UPSTASH_REDIS_REST_TOKEN: ${{ secrets.UPSTASH_REDIS_REST_TOKEN }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
        run: |
          cat <<EOF > k8s/app-secrets-filled.yaml
          apiVersion: v1
          kind: Secret
          metadata:
            name: app-secrets
          type: Opaque
          data:
            MONGODB_URI: $(echo -n "$MONGODB_URI" | base64 -w 0)
            GOOGLE_CLIENT_ID: $(echo -n "$GOOGLE_CLIENT_ID" | base64 -w 0)
            GOOGLE_CLIENT_SECRET: $(echo -n "$GOOGLE_CLIENT_SECRET" | base64 -w 0)
            CLIENT_URL: $(echo -n "$CLIENT_URL" | base64 -w 0)
            SESSION_SECRET: $(echo -n "$SESSION_SECRET" | base64 -w 0)
            UPSTASH_REDIS_REST_URL: $(echo -n "$UPSTASH_REDIS_REST_URL" | base64 -w 0)
            UPSTASH_REDIS_REST_TOKEN: $(echo -n "$UPSTASH_REDIS_REST_TOKEN" | base64 -w 0)
            GEMINI_API_KEY: $(echo -n "$GEMINI_API_KEY" | base64 -w 0)
            RESEND_API_KEY: $(echo -n "$RESEND_API_KEY" | base64 -w 0)
            STRIPE_SECRET_KEY: $(echo -n "$STRIPE_SECRET_KEY" | base64 -w 0)
            STRIPE_WEBHOOK_SECRET: $(echo -n "$STRIPE_WEBHOOK_SECRET" | base64 -w 0)
          EOF
          kubectl apply -f k8s/app-secrets-filled.yaml
          rm k8s/app-secrets-filled.yaml  # Clean up the filled secret file

      - name: Check deployment status
        run: |
          kubectl rollout status deployment/node-app
          kubectl get pods
          kubectl get services
          kubectl get ingress

      - name: Wait for LoadBalancer external IP
        run: |
          echo "Waiting for LoadBalancer external IP..."
          while [ -z $(kubectl get service node-app-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}') ]; do
            sleep 10
          done
          echo "External IP: $(kubectl get service node-app-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"

      - name: Check ingress status
        run: |
          echo "Ingress status:"
          kubectl describe ingress node-app-ingress

      - name: Check pod logs
        run: |
          echo "Pod logs:"
          kubectl logs -l app=node-app --tail=100

      - name: Deployment summary
        run: |
          echo "Deployment Summary:"
          echo "-------------------"
          echo "Pods:"
          kubectl get pods -l app=node-app
          echo "\nServices:"
          kubectl get services
          echo "\nIngress:"
          kubectl get ingress
          echo "\nExternal IP:"
          kubectl get service node-app-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}'

      - name: Check pod logs (if failure)
        if: failure()
        run: |
          for pod in $(kubectl get pods -l app=node-app -o jsonpath='{.items[*].metadata.name}'); do
            echo "Logs for $pod:"
            kubectl logs $pod
            echo "-------------------"
          done

      - name: Describee deployment (if failure)
        if: failure()
        run: |
          kubectl describe deployment node-app
